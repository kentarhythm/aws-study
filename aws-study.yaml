AWSTemplateFormatVersion: "2010-09-09"
Description: aws-study-cf template

Parameters:
  MyIP: # ユーザーに自身のIPアドレスを入力してもらう(SSH接続用)
    Type: String
    Description: Your IP address (without /32)

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 SSH Key Pair name
  
  LatestAmiId: # SSM パラメータストアから最新の Amazon Linux 2023 AMI ID を取得する
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>" # SSM パラメータを使ってEC2イメージIDを参照する型を指定
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64" # AmazonLinux2023の最新のAMI IDを指す

  Prefix: # プレフィックスを変数化
    Type: String # リソース名に付けるプレフィックス（文字列）
    Default:  "aws-study" # デフォルト値
    Description:  "リソース名のプレフィックス"

  RDSMasterPassword: # RDSのマスターパスワード
    Description: MasterUserPassword for RDS
    Type: String 
    NoEcho: true # パスワードは非表示で入力

Resources:
  # VPCの作成
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-vpc-cf"
  
  # Internet Gateway（IGW）の作成
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-igw-cf"
  
  # IGWをVPCへアタッチ
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW
  
  
  # サブネットの作成
  # パブリックサブネット1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select  [0, !GetAZs 'ap-northeast-1'] # 自動でAZを選択
      VpcId: !Ref VPC # 作成したVPCを参照
      CidrBlock: 10.0.1.0/24 # サブネットのCIDR範囲
      MapPublicIpOnLaunch: true # パブリックIPを割り当てる
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-subnet-public1-cf"
  
  # パブリックサブネット2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select  [1, !GetAZs 'ap-northeast-1'] # 自動でAZを選択
      VpcId: !Ref VPC # 作成したVPCを参照
      CidrBlock: 10.0.2.0/24 # サブネットのCIDR範囲
      MapPublicIpOnLaunch: true # パブリックIPを割り当てる
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-subnet-public2-cf"

  # プライベートサブネット1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select  [0, !GetAZs 'ap-northeast-1'] # 自動でAZを選択
      VpcId: !Ref VPC # 作成したVPCを参照
      CidrBlock: 10.0.3.0/24 # サブネットのCIDR範囲
      MapPublicIpOnLaunch: false # パブリックIPを割り当てない
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-subnet-private1-cf"
  
  # プライベートサブネット2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select  [1, !GetAZs 'ap-northeast-1'] # 自動でAZを選択
      VpcId: !Ref VPC # 作成したVPCを参照
      CidrBlock: 10.0.4.0/24 # サブネットのCIDR範囲
      MapPublicIpOnLaunch: false # パブリックIPを割り当てない
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-subnet-private2-cf"
  
  # パブリックルートテーブルの作成
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC # 作成したVPCを参照
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-public-rt-cf"
  
  # インターネットへのルート追加
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable # 作成したRouteTableを参照
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW # 作成したIGWを参照

  # パブリックサブネット1 にルートテーブルを関連付け
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1 # 作成したパブリックサブネット1を参照
      RouteTableId: !Ref PublicRouteTable # 作成したRouteTableを参照

  # パブリックサブネット2 にルートテーブルを関連付け
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2 # 作成したパブリックサブネット2を参照
      RouteTableId: !Ref PublicRouteTable #作成したパブリックルートテーブルを参照

  # セキュリティグループの作成（EC2用）
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and web access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp # プロトコル
          FromPort: 22 # SSH用のポート
          ToPort: 22 # SSH用のポート
          CidrIp: !Sub "${MyIP}/32" # 自分のIPアドレスに対するSSHアクセスのみを許可
        - IpProtocol: tcp # プロトコル
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup  # ALBセキュリティグループのみを許可
      SecurityGroupEgress:
        - IpProtocol:  -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-ec2-sg-cf"

  # EC2インスタンスの作成
  EC2Instance: #SSMパラーメータストアからAmazon Linux2023の最新AMI IDを取得
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId # 作成したAMI IDを参照
      InstanceType: t2.micro #インスタンスのタイプ（無料利用枠対象）
      KeyName: !Ref KeyName #キーペアを参照
      SubnetId: !Ref PublicSubnet1 # 作成したパブリックサブネット1を参照
      SecurityGroupIds:
        - !Ref EC2SecurityGroup # 作成したセキュリティグループを参照
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-ec2-cf"

  # セキュリティグループの作成（RDS用）
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow EC2 access to RDS # EC2インスタンスからのDBアクセスを許可
      VpcId: !Ref VPC # 作成したVPCを参照
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306 # MySQLデータベースのデフォルト通信ポート番号
          ToPort: 3306 # MySQLデータベースのデフォルト通信ポート番号
          SourceSecurityGroupId: !Ref EC2SecurityGroup #EC2のセキュリティグループからのアクセスのみ許可
      SecurityGroupEgress:
        - IpProtocol:  -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-rds-sg-cf"

  # DBサブネットグループの作成
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS in 2AZs # AWS仕様で、異なるAZに属する2つ以上のサブネットが必須 (マルチAZ構成でなくても)
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-rds-subnet-gp-cf"

  # RDSの作成
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20 # ストレージの割り当て
      DBInstanceClass: db.t4g.micro # 無料利用枠インスタンスタイプ
      AllowMajorVersionUpgrade: false # メジャーバージョンアップのグレードアップはしない
      AutoMinorVersionUpgrade: true # マイナーバージョンアップを自動で行う
      BackupRetentionPeriod: 1 # 自動バックアップを1日間有効にする（0にすると無効）
      DBInstanceIdentifier: !Sub "${Prefix}-rds-cf"
      DBName: awsstudy # データベース名を指定
      DBSubnetGroupName: !Ref RDSSubnetGroup # 作成したDBサブネットグループを参照
      DeletionProtection: true # 削除保護を有効
      Engine: mysql # データベースエンジンはMySQLを指定
      EngineVersion: 8.0.39 # バージョンは8.0.39を指定
      MasterUsername: root
      MasterUserPassword: !Ref RDSMasterPassword # パラメーター：パスワード項目を参照
      MultiAZ: false #シングルAZで構成
      Port: 3306 #MySQLのデフォルト
      PubliclyAccessible: false #パブリックアクセスを許可しない
      StorageEncrypted: true # 暗号を有効化
      StorageType: gp2 # 無料利用枠に対応の汎用SSD(gp2)
      VPCSecurityGroups: # 作成したセキュリティグループ（RDS用）を参照
        - !Ref RDSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-rds-cf"
  
  # ターゲットグループの作成
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${Prefix}-tg-cf"
      Protocol: HTTP # プロトコルはHTTP
      Port: 80 # ターゲットグループがリッスンするポート（80）
      VpcId: !Ref VPC # 作成したVPCを参照
      TargetType: instance # ターゲットタイプ
      HealthCheckProtocol: HTTP # ヘルスチェックプロトコル
      HealthCheckPath: /
      HealthyThresholdCount: 5 # 正常のしきい値（5回）
      UnhealthyThresholdCount: 2 # 非正常のしきい値（2回）
      HealthCheckTimeoutSeconds: 5 # タイムアウト（5秒）
      HealthCheckIntervalSeconds: 30 # ヘルスチェック間隔（30秒）
      Matcher: # 成功コード
        HttpCode: 200
      Targets:
        - Id: !Ref EC2Instance # EC2へ8080で受け渡し
          Port: 8080
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-tg-cf"
  
  # ALBのリスナーを設定
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB  # 作成したALBを参照
      Port: 80 # ポート80で受けたら作成したターゲットグループへ転送
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup  # 作成したターゲットグループへ転送

  # ALBの作成
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${Prefix}-alb-cf"
      Scheme: internet-facing  # インターネット向け
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup #作成したALBセキュリティグループを参照
      Type: application
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-alb-cf"

  # セキュリティグループの作成（ALB用）
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow internet access to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp # プロトコル
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # ポート80アクセスを全て許可（インターネット経由のユーザーアクセス）
      SecurityGroupEgress:
        - IpProtocol:  -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-alb-sg-cf"
